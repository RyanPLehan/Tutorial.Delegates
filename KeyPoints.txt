Real World Problem
You call your utilities company about a problem.  When you call, there is a long wait before you get to speak to an agent.
The automated process then asks if you would like an agent to contact you so that you do not need to wait.
You agree and the automated process then asks your preference of how the agent should contact you:
NOTE: You do not give any additional information such as phone number, email address, etc.  Your utilities company has that information.
1. Call back via your phone
2. Text message to your phone
3. Email - Link to chat on website
4. Invoke an app on your phone to initiate a chat (Future functionality).  Works only if application is installed.


Characteristics
	1.	Set of common steps
	2.	At least one step that differs / Custom


Programming/Coding Problem
Function (Foo) performs a commonly used pattern/routine but also contains specialtiy/custom code.  
   Developer want to reuse that pattern/routine, so the developer generally does one of the following:
   1.  Adds a parameter to the existing method as a branching mechanism to execute their custom code.
		This clutters the code and goes against the principle that a method should do one and only one thing
   2.  Copies Foo to a new function (CustomFoo) and replaces the custom code for their own.
		This is problematic when having to modify the common pattern/routine.  all the copies need to be modified too.
   3.  Refactors using classes.  Having Foo as the base method and then overrides the base method.
		This generally violates the IS-A rule when it comes to inheritance.

To alievate the problem, function (Foo) needs to developed so that the commonly used pattern/routine is in one area while
   having the ability to invoke an arbitrary/random/custom process (callback function).

What a Callback is and is not
	1.	Callback is a synchronous process.
		The call waits for a response/completion from the callback routine
	2.  Callback is not asynchronous/event based process
		It is not a fire and forget


Callback Function
Is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.
As opposed to referencing a data value, the argument references to executable code within memory.


Questions....
	1.  How do you pass code to a function?
	2.  How does the code get executed?
	3.  When does the code get executed?


Programming Language
Defines the callback mechanism

	C/C++ Function Pointers
		1.  A function pointer points to code, not data. The function pointer points to executable code within memory.
			Just like a human reading a book.  Data is read in from source and stored in memory.
		2.	Problem with Function Pointers - All based upon Assumptions
			a.	Assumes the callback function has the proper parameters
				1.	Number of parameters
				2.	Correct data type
				3.	In the right order
			b.	Assumes the callback function returns the proper data type
			c.	Assumes the developer of the callback function is honest and good in nature.
				

	C# (.Net) Delegate
		1.  A type that represents references to methods with a particular parameter list and return type.
		2.  Are similar to C++ function pointers, but delegates are fully object-oriented, and unlike C++ pointers to member functions, 
		    delegates encapsulate both an object instance and a method.
		3.  Can be used to define callback methods.


	delegate Keyword: Must explicity define the function reference type.
		1.  Must have the proper accessibility scope (ie public)
		2.  Must define the input parameters, if any
			Parameters are defined as the same as a regulare function: CallBackFunction(int num, string msg)
		3.  Must define the return type, if any

	Action/Func Keywords: 
		1.  They are delegates without the delegate keyword
			https://learn.microsoft.com/en-us/dotnet/api/system.action-1?view=net-7.0
			https://learn.microsoft.com/en-us/dotnet/api/system.func-2?view=net-7.0
		2.  Parameters are define as generics Action<int, string>
		3.	The function reference type is define inline with the outer function
		4.  Each keyword defines if there is a return type or not.
			This separation furthers simplicity as well as more consistent development between the developer of the common function 
				 and the developer of the custom callback function
			Action - Callback function does NOT return data
				a.  Will get a compile error if trying to assign the result of the callback function
			Func - Callback function returns data
				a.	The last generic is the return data type

	Predicate Keyword:
		1.	A simplified form of Func<T, bool>
			Callback function that takes 1 parameter of type T and returns a boolean value (true/false)
			https://learn.microsoft.com/en-us/dotnet/api/system.predicate-1?view=net-7.0


	Identifiers vs Anonymous
		1.  Identifier is a developer/user defined name used to associate to data or code (function).
			The identifier is used to reference the data or function by name as needed.
			int x = 5;		// int is the data type, x is the identifier, 5 is the data
			public void Calculate()		// Calculate is the identifier associated with the code
			{}
		2.  Anonymous references are data or code without an identifier (name)
			Console.WriteLine("{0} + {1} = {2}", 5, 6, 5+6);		// 5 and 6 are integer data literals but they are also anonymous
			MyList.Where(x => { return x.Age > 21 && verified; })	// { return x.Age > 21 && verified; } is code that cannot be called by name


	Lambda Expressions
		1.  Allow creating of Anonymous Function as inline code
		2.	Identifiers to the left of the => are the 'parameters'
			More than 1 parameter needs to be enclosed by parenthesis
			(x, y) => x * y / 2
		3.  Advantage over Identified Function
			Use of data defined outside of both the lambda expression and the function being invoked